<!DOCTYPE html>
<html>
    <head>
        <title>Match Scouting Field View</title>
        <link rel="stylesheet" href="/static/styles/field.css">
    </head>
    <script>
        let currentPhase = "Pre-Match";

        function setPhase(phase){
            /**
              * Sets the current phase of the match to `phase`.
              * @param phase one of ["Auto", "Teleop"]
              */
            currentPhase = phase;
            const phaseElements = document.querySelectorAll('[class*="phase-"]');
            phaseElements.forEach(el => {
                if (el.classList.contains('phase-'+phase)){
                    el.style.display='flex';
                    el.style.cursor = 'pointer';
                } else{
                    el.style.display='none';
                }
            });

        }

        let CountdownTime = -1;

        function Timer(time,phase,nextPhase=null){
            /**
             * Switches to `phase`, sets a timer for `time`, and then switches to `nextPhase` with a countdown for 120 seconds.
             * 
             * @param time the amount of time the timer should go for
             * @param phase the initial phase
             * @param nextPhase the final phase
             */
            const startBtn = document.getElementById('startBtn');
            startBtn.style.display='none';
            setPhase(phase);
            CountdownTime=time;
            const countDownElement = document.getElementById('timer-display');
            const interval=setInterval(function(){
                CountdownTime--;
                countDownElement.textContent=`${phase}: ${CountdownTime}`;
                if (CountdownTime<0){
                    clearInterval(interval);
                    if (nextPhase){
                        const nextBtn=document.getElementById("next-phase-btn");
                        nextBtn.style.display='flex';
                        nextBtn.style.cursor = 'pointer';
                        nextBtn.onclick=()=>{
                            nextBtn.style.display="none";
                            Timer(120,nextPhase);
                        };
                    }else{
                        countDownElement.textContent= 'Match End'
                        const submitBtn = document.getElementById("submit-btn");
                        submitBtn.style.display='flex';
                        submitBtn.style.cursor = 'pointer';
                        submitBtn.onclick = submit;
                    }
                }
            },1000);
        }

        function SelectPos(){
            /**
             * Makes buttons invisible after position is selected.
             */
            const posButtons=document.querySelectorAll('[class*="position"]')
            posButtons.forEach(el => {
                el.style.display='none';
            })
        }

        class Alliance {
            /**
             * An enum class to represent alliance colors.
             */
            static #_RED = 0;
            static #_BLUE = 1;

            static get RED() { return this.#_RED; }
            static get BLUE() { return this.#_BLUE; }
        }

        class GamePiece {
            /**
             * An enum class to represent game piece types.
             */
            static #_SAMPLE = 0;
            static #_SPECIMEN = 1;

            static get SAMPLE() { return this.#_SAMPLE; }
            static get SPECIMEN() { return this.#_SPECIMEN; }
        }

        class Level {
            /**
             * An enum class to represent which level a game piece was scored on.
             */
            static #_LOW = 0;
            static #_HIGH = 1;

            static get LOW() { return this.#_LOW; }
            static get HIGH() { return this.#_HIGH; }
        }

        let events = [];

        function score(alliance, gamePiece, level) {
            /**
              * Stores that a game piece has been scored.
              * 
              * @param alliance the alliance (Alliance.*)
              * @param gamePiece the game piece (GamePiece.*)
              * @param level the level (Level.*)
              */
            events.push({
                "alliance": alliance,
                "gamePiece": gamePiece,
                "level": level,
                "phase": currentPhase,
                "time": CountdownTime
            });
        }

        async function submit() {
            /**
              * Submits data once a match is over.
              */
            let packet = {}
            packet.auto_high_sample = events.filter((event) => event["gamePiece"] === GamePiece.SAMPLE && event["phase"] === "Auto" && event["level"] === Level.HIGH).length;
            packet.auto_low_sample = events.filter((event) => event["gamePiece"] === GamePiece.SAMPLE && event["phase"] === "Auto" && event["level"] === Level.LOW).length;
            packet.auto_high_specimen = events.filter((event) => event["gamePiece"] === GamePiece.SPECIMEN && event["phase"] === "Auto" && event["level"] === Level.HIGH).length;
            packet.auto_low_specimen = events.filter((event) => event["gamePiece"] === GamePiece.SPECIMEN && event["phase"] === "Auto" && event["level"] === Level.LOW).length;
            
            packet.high_sample = events.filter((event) => event["gamePiece"] === GamePiece.SAMPLE && event["phase"] === "Teleop" && event["level"] === Level.HIGH).length;
            packet.low_sample = events.filter((event) => event["gamePiece"] === GamePiece.SAMPLE && event["phase"] === "Teleop" && event["level"] === Level.LOW).length;
            packet.high_specimen = events.filter((event) => event["gamePiece"] === GamePiece.SPECIMEN && event["phase"] === "Teleop" && event["level"] === Level.HIGH).length;
            packet.low_specimen = events.filter((event) => event["gamePiece"] === GamePiece.SPECIMEN && event["phase"] === "Teleop" && event["level"] === Level.LOW).length;
            
            packet.climb_level = 0;
            packet.additional_points = 0;

            let response = await fetch(window.location, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(packet)
            });
        }

    </script>
    <body>
        <div class="header">
            <div class="header-left">
                <label for="preload" class="phase-Pre-Match">Pre-Load: </label>
                <input type="checkbox" id="preload" class="phase-Pre-Match">
            </div>
            <div class="header-center">
                <button class="btn start" id='startBtn' onclick="Timer(15,'Auto','Teleop')" style="cursor:pointer;"> &#9655;  </button>
                <button id="next-phase-btn" class="btn next-phase" style="display:none;">Start Teleop</button>
                <button id="submit-btn" class="btn start" style="display:none; cursor:pointer;">Submit</button>
            </div>
            <div class="header-right">
                <div class="team">{{team}}</div>
                <div class="timer-display" id="timer-display">Pre-Match</div>
            </div>
        </div>
        <div class="main">
            <div class="menu phase-Teleop" style="display:none;">
                <button class="btn intake2"> Intake Ground </button>
                <button class="btn defense" style="cursor:pointer;"></button> 
                <button class="btn undo" style="cursor:pointer;"></button>
                <button class="btn feed" style="cursor:pointer;"></button>
            </div>
            <div class="menu phase-Auto" style="display:none;">
                <button class="btn drop-sample" style="cursor:pointer;"> Drop Sample</button>
                <button class="btn drop-specimen" style="cursor:pointer;">Drop Specimen</button>
                <button class="btn intake2" style="cursor:pointer;">Intake Ground</button>
            </div>
            <div class="menu phase-Pre-Match"></div>
            <div class = "image-container"> 
                <button class="btn position blue-start1 phase-Pre-Match" id="bluestartpos1" onclick="SelectPos()" style="cursor:pointer;"></button>
                <button class="btn position blue-start2 phase-Pre-Match" id="bluestartpos2" onclick="SelectPos()" style="cursor:pointer;"></button>
                <button class="btn position red-start1 phase-Pre-Match" id="redstartpos1" onclick="SelectPos()" style="cursor:pointer;"></button>
                <button class="btn position red-start2 phase-Pre-Match" id="redstartpos2" onclick="SelectPos()" style="cursor:pointer;"></button>
                <button class="btn blue-1 sample-high phase-Auto" style="display:none;" onclick="score(Alliance.BLUE, GamePiece.SAMPLE, Level.HIGH);">H</button>
                <button class="btn blue-2 sample-low phase-Auto" style="display:none;" onclick="score(Alliance.BLUE, GamePiece.SAMPLE, Level.LOW);">L</button>
                <button class="btn submersible-intake phase-Auto" style="display:none;"></button>
                <button class="btn red-1 sample-low phase-Auto" style="display:none;" onclick="score(Alliance.RED, GamePiece.SAMPLE, Level.LOW);">L</button>
                <button class="btn red-2 sample-high phase-Auto" style="display:none;" onclick="score(Alliance.RED, GamePiece.SAMPLE, Level.HIGH);">H</button>
                <button class="btn red-1 sample-high phase-Teleop" style="display:none;" onclick="score(Alliance.RED, GamePiece.SAMPLE, Level.HIGH);">H</button>
                <button class="btn red-2 sample-low phase-Teleop" style="display:none;" onclick="score(Alliance.RED, GamePiece.SAMPLE, Level.LOW);">L</button>
                <button class="btn blue-1 sample-high phase-Teleop" style="display:none;" onclick="score(Alliance.BLUE, GamePiece.SAMPLE, Level.HIGH);">H</button>
                <button class="btn blue-2 sample-low phase-Teleop" style="display:none;" onclick="score(Alliance.BLUE, GamePiece.SAMPLE, Level.LOW);">L</button>
                <button class="btn submersible-intake phase-Teleop" style="display:none;"></button>
                <button class="btn red-3 specimen-high phase-Auto" style="display:none;" onclick="score(Alliance.RED, GamePiece.SPECIMEN, Level.HIGH);">H</button>
                <button class="btn red-4 specimen-low phase-Auto" style="display:none;" onclick="score(Alliance.RED, GamePiece.SPECIMEN, Level.LOW);">L</button>
                <button class="btn blue-3 specimen-high phase-Auto" style="display:none;" onclick="score(Alliance.BLUE, GamePiece.SPECIMEN, Level.HIGH);">H</button>
                <button class="btn blue-4 specimen-low phase-Auto" style="display:none;" onclick="score(Alliance.BLUE, GamePiece.SPECIMEN, Level.LOW);">L</button>
                <button class="btn red-3 specimen-high phase-Teleop" style="display:none;" onclick="score(Alliance.RED, GamePiece.SPECIMEN, Level.HIGH);">H</button>
                <button class="btn red-4 specimen-low phase-Teleop" style="display:none;" onclick="score(Alliance.RED, GamePiece.SPECIMEN, Level.LOW);">L</button>
                <button class="btn blue-3 specimen-high phase-Teleop" style="display:none;" onclick="score(Alliance.BLUE, GamePiece.SPECIMEN, Level.HIGH);">H</button>
                <button class="btn blue-4 specimen-low phase-Teleop" style="display:none;" onclick="score(Alliance.BLUE, GamePiece.SPECIMEN, Level.LOW);">L</button>
            </div>
            <div class="scoring_menu"></div>
        </div>
    </body>
</html>